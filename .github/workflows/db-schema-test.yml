name: Database Schema Test

on: [push, pull_request]

jobs:
  test-mariadb-schema:
    runs-on: ubuntu-latest
    env:
      MARIADB_PORT: 3306
      MARIADB_HOST: 127.0.0.1
      MARIADB_USER: root
      MARIADB_PASSWORD: testroot
      MARIADB_DATABASE: wmagent
    strategy:
      matrix:
        mariadb-version: ['10.6', '10.11', '11.4']
    timeout-minutes: 10

    services:
      mariadb:
        image: mariadb:${{ matrix.mariadb-version }}
        env:
          MARIADB_ROOT_PASSWORD: testroot
          MARIADB_DATABASE: ${{ env.MARIADB_DATABASE }}
          MARIADB_ROOT_HOST: "%"
          MARIADB_ALLOW_EMPTY_PASSWORD: "no"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mariadb-admin ping -h localhost -u root -ptestroot"
          --health-interval=5s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=30s

    steps:
      - uses: actions/checkout@v4

      - name: Validate Environment
        run: |
          [ -z "$MARIADB_HOST" ] && echo "MARIADB_HOST is not set" && exit 10
          [ -z "$MARIADB_PORT" ] && echo "MARIADB_PORT is not set" && exit 11
          [ -z "$MARIADB_USER" ] && echo "MARIADB_USER is not set" && exit 12
          [ -z "$MARIADB_PASSWORD" ] && echo "MARIADB_PASSWORD is not set" && exit 13
          [ -z "$MARIADB_DATABASE" ] && echo "MARIADB_DATABASE is not set" && exit 14
          echo "All required environment variables are set!"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install SQLFluff
        run: |
          pip install sqlfluff

      - name: Install SQLCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcheck

      - name: MariaDB SQL Lint
        run: |
          echo "Linting MariaDB SQL files..."
          sqlfluff lint sql/**/mariadb/*.sql || exit 21

      - name: Oracle SQL Lint
        run: |
          echo "Linting Oracle SQL files..."
          sqlfluff lint --config .sqlfluff.oracle sql/**/oracle/*.sql || \
            echo "::warning ::Oracle SQL linting completed with warnings"

      - name: Wait for MariaDB
        run: |
          max_retries=30
          counter=0
          echo "Waiting for MariaDB to be ready..."
          while ! mariadb-admin ping -h"$MARIADB_HOST" -P"$MARIADB_PORT" -u"$MARIADB_USER" -p"$MARIADB_PASSWORD" -e "SELECT 1" >/dev/null 2>&1; do
            counter=$((counter + 1))
            if [ $counter -gt $max_retries ]; then
              echo "Error: Timed out waiting for MariaDB to be ready"
              exit 1
            fi
            echo "Attempt $counter/$max_retries: MariaDB is not ready yet, waiting..."
            sleep 2
          done
          echo "MariaDB is ready!"

      - name: Deploy WMBS Schema
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/wmbs/mariadb/create_wmbs_tables.sql || exit 1
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/wmbs/mariadb/create_wmbs_indexes.sql
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/wmbs/mariadb/initial_wmbs_data.sql

      - name: Deploy Agent Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/agent/mariadb/create_agent.sql

      - name: Deploy DBS3Buffer Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/dbs3buffer/mariadb/create_dbs3buffer.sql

      - name: Deploy BossAir Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/bossair/mariadb/create_bossair.sql

      - name: Deploy ResourceControl Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < sql/resourcecontrol/mariadb/create_resourcecontrol.sql

      - name: Verify Schema Deployment
        run: |
          # Check if tables exist and have correct structure
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE -e "
            SELECT table_name, table_schema 
            FROM information_schema.tables 
            WHERE table_schema = '$MARIADB_DATABASE'
            ORDER BY table_name;
          "

          # Verify some key relationships
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE -e "
            SELECT 
              table_name,
              column_name,
              referenced_table_name,
              referenced_column_name
            FROM information_schema.key_column_usage
            WHERE referenced_table_name IS NOT NULL
              AND table_schema = '$MARIADB_DATABASE'
            ORDER BY table_name, column_name;
          "

          # Check for any errors in table creation
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE -e "SHOW ENGINE INNODB STATUS\G" | grep -i error 

      - name: Cleanup
        if: always()  # Run even if previous steps failed
        continue-on-error: true  # Don't fail the workflow if cleanup fails
        run: |
          # Try to drop database, but don't fail if it doesn't exist or if connection fails
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD -e "DROP DATABASE IF EXISTS $MARIADB_DATABASE" || true

          # Additional cleanup commands if needed
          echo "Cleanup attempted - any errors above can be safely ignored"